# Task prompt definitions with placeholders.
# Schema:
# tasks:
#   - id: unique id (used in code)
#     agent: agent id reference
#     description: | multi-line description (supports placeholders)
#     expected_output: short text
#     context: [optional list of task ids whose outputs feed this one]
# Placeholders available: {metrics}, {ticker}, {years}, {filing_types}, {hint}, {sec_filing_content}
# Runtime will supply these via interpolation.

tasks:
  - id: coordination_plan
    agent: coordinator
    description: |
      You are the GraduateAssistant manager agent. First, design an execution plan for ticker {ticker} over years {years} and forms {filing_types}.
      OBJECTIVE: Produce a delegation blueprint before any other task runs.
      INCLUDE:
      - Ordered task list (retrieve_filings -> clean_filings -> extract_metrics -> compute_metrics (if {derived_metrics}) -> validate_all -> export_results)
      - Parallelization opportunities (e.g., cleaning after each retrieval batch)
      - Retry strategy & fallback if a filing is missing or corrupted
      - Resource usage minimization (reuse cleaned text, avoid duplicate downloads)
      - Which metrics require primitives for derived calculations: {derived_metrics}
      OUTPUT: JSON plan with keys: tasks[], dependencies{}, parallel_groups[], notes, risk_mitigation.
    expected_output: JSON object with keys tasks, dependencies, parallel_groups, notes, risk_mitigation

  - id: retrieve_filings
    agent: retriever
    description: |
      Retrieve SEC EDGAR filings for ticker/CIK {ticker} covering years {years} and forms {filing_types}.
      REQUIREMENTS:
      - Resolve ticker to CIK if needed.
      - Enumerate candidate filings prioritizing: DEF 14A (compensation), 10-K (fundamentals), 10-Q (interim), 8-K (events).
      - Respect SEC rate limits and include correct User-Agent header.
      - Avoid re-downloading if cached copy exists.
      - Output structured manifest with: accession_number, form, filing_date, primary_document, local_path.
      - Limit to most relevant N filings per form category (default 3) unless {hint} specifies otherwise.
      Provide JSON manifest only.
    expected_output: JSON list of filing metadata objects with local cache paths

  - id: clean_filings
    agent: cleaner
    context: [retrieve_filings]
    description: |
      Clean and normalize previously retrieved filings.
      ACTIONS:
      - Strip scripts/styles/nav boilerplate.
      - Preserve table text with row order.
      - Normalize whitespace, collapse repeated blank lines.
      - Tag obvious section headers (e.g., 'SUMMARY COMPENSATION TABLE').
      - Record mapping of original file -> cleaned text path.
      OUTPUT: JSON object with array of { accession_number, form, filing_date, cleaned_path }.
    expected_output: JSON object containing cleaned filing records with paths

  - id: extract_metrics
    agent: researcher
    context: [clean_filings]
    description: |
      From cleaned filing texts, extract requested metrics {metrics} plus any prerequisite primitives for derived metrics {derived_metrics}.
      Use the hint if provided: {hint}.
      Ensure multi-year extraction across all available years inside each relevant table.
      OUTPUT: JSON with per-metric nested year objects, including name, title, source, value.
    expected_output: JSON object mapping metrics to year-value detail objects

  - id: compute_metrics
    agent: calculator
    context: [extract_metrics]
    description: |
      Compute derived metrics based on extracted primitive values using formula specifications:
      {calculation_expressions}
      RULES:
      - Perform calculations via Python evaluation only; no manual arithmetic approximation.
      - If an input component is missing for a year, result for that derived metric-year is null with a reason field.
      OUTPUT: JSON object of derived metrics paralleling the structure of extracted metrics.
    expected_output: JSON object of derived metrics with year-wise computed values and provenance notes

  - id: validate_all
    agent: validator
    context: [extract_metrics, compute_metrics]
    description: |
      Validate extracted and computed metrics for consistency.
      CHECKS:
      - No placeholder or sentinel values (99999, NA, TBD, 0 unless legitimately zero).
      - Units plausibility and cross-year continuity.
      - Year coverage alignment across metrics.
      - Missing data appropriately null.
      OUTPUT: JSON validation report summarizing issues, warnings, and pass/fail per metric.
    expected_output: JSON validation report with issues, warnings, summary, and pass status

  - id: export_results
    agent: exporter
    context: [validate_all]
    description: |
      Package final validated data for export in format {output_format}.
      Include metadata: ticker {ticker}, years {years}, forms {filing_types}, processing_steps, timestamp.
      Ensure atomic write and preserve nulls.
      OUTPUT: JSON object describing written artifact (path, format, record_count).
    expected_output: JSON object with export path, format, and metadata


  - id: research_task
    agent: researcher
    description: |
      IMPORTANT: SEC filings often contain compensation or financial data from MULTIPLE YEARS.
      For example, proxy statements contain 3+ years of data, 10-K filings contain historical data.
      You will be provided with actual SEC filing content.
      Extract the requested metrics: {metrics} from the SEC filing text provided below.
      Filing details: Ticker {ticker}, Filing Year(s) {years}, Filing types {filing_types}
      Hint: {hint}

      SEC FILING CONTENT:
      {sec_filing_content}

      CRITICAL INSTRUCTIONS:
      1. Look for compensation tables, financial statements, or relevant sections
      2. IMPORTANT: Executive titles may span multiple rows in tables. For example:
         Row 1: 'Luca Maestri' 'Senior Vice President,'
         Row 2: [blank] 'Chief Financial Officer'
         This person is the CFO - look for 'Chief Financial Officer' anywhere near the name
      3. Search for executives by their functional titles: CEO, CFO, COO, CTO, etc.
      4. Extract data for ALL YEARS available in the document (typically 3+ years)
      5. Extract EXACT numbers from tables - DO NOT estimate or round
      6. For each requested metric, provide data for ALL available years in JSON format:
         {
           "Total CEO compensation": {
             "2022": {
               "value": [exact number],
               "name": "[executive name]",
               "title": "[full title from table]",
               "source": "[table/section name]"
             },
             "2021": {
               "value": [exact number],
               "name": "[executive name]",
               "title": "[full title from table]",
               "source": "[table/section name]"
             }
           },
           "Total CFO compensation": {
             "2022": {
               "value": [exact number],
               "name": "[executive name]",
               "title": "[full title from table]",
               "source": "[table/section name]"
             }
           }
         }
      CRITICAL: If data is NOT found for a specific year or metric, use null (not 99999, not 0, not any made-up number).
      Only include years where you actually found the data in the filing.
      REMEMBER: Look for 'Chief Financial Officer', 'Chief Executive Officer', etc. even if they appear on separate rows from the name.
    expected_output: JSON object with requested metrics, each containing data for ALL years found in the filing, including executives whose titles span multiple table rows

  - id: analysis_task
    agent: analyst
    context: [research_task]
    description: |
      Validate the extracted JSON data and ensure it contains ALL available years and executives.
      Your job is to:
      1. Verify the numbers match what's in the SEC filing content for ALL years
      2. Ensure the JSON is valid and well-structured
      3. Check that years are complete (don't miss any years from the original data)
      4. IMPORTANT: Verify that executives with multi-row titles were found correctly:
         - CFO might be listed as 'Senior Vice President, Chief Financial Officer'
         - Look for anyone with 'Chief Financial Officer' in their title
         - Look for anyone with 'Chief Executive Officer' in their title
      5. Output the final JSON with clean numerical values (no commas, dollar signs)

      Your output must be valid JSON only, nothing else.
      CRITICAL: NEVER use placeholder values like 99999, 0, or any made-up numbers.
      If data is not found, use null or omit the year entirely.
      Only include years where actual data exists in the filing.
      Format with ALL available years and proper executive identification:
      {
        "Total CEO compensation": {
          "2022": {
            "value": 99420097,
            "name": "Tim Cook",
            "title": "Chief Executive Officer",
            "source": "Summary Compensation Table"
          },
          "2021": {
            "value": 98734394,
            "name": "Tim Cook",
            "title": "Chief Executive Officer",
            "source": "Summary Compensation Table"
          }
        },
        "Total CFO compensation": {
          "2022": {
            "value": 27151798,
            "name": "Luca Maestri",
            "title": "Senior Vice President, Chief Financial Officer",
            "source": "Summary Compensation Table"
          },
          "2021": {
            "value": 26978503,
            "name": "Luca Maestri",
            "title": "Senior Vice President, Chief Financial Officer",
            "source": "Summary Compensation Table"
          }
        }
      }
      If data for 2023 doesn't exist, DO NOT include a 2023 entry. If an entire metric is not found, use null for the whole metric.
    expected_output: Valid JSON object with clean numerical values for each requested metric across ALL available years, correctly identifying executives with multi-row titles
